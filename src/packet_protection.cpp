#include <stdio.h>
#include <string.h>
#include <openssl/ssl.h>
#include <openssl/aes.h>

#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <string.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <arpa/inet.h>
#include <netinet/in.h>
#include "include/common.h"

#define BUFF_SIZE 256

int packet_protection(unsigned char in[], int inl, 
        unsigned char header[], int header_sz,
        unsigned char payload[], int *payload_sz,
        unsigned char key[], int key_sz,
        unsigned char nonce[], int nonce_sz,
        unsigned char *associated_data, int associated_data_sz,
        unsigned char tag[AES_BLOCK_SIZE]
    ){
    EVP_CIPHER_CTX *evp = NULL;
    int mode = ENC;

    int payloadl;

    int tag_sz = AES_BLOCK_SIZE;

    if ((evp = EVP_CIPHER_CTX_new()) == NULL){
        fprintf(stderr, "ERROR: EVP_CIPHER_CTX_new\n");
        EVP_CIPHER_CTX_free(evp);
        return 0;
    }

    if (EVP_CipherInit(evp, EVP_aes_128_gcm(), key, nonce, mode) != SSL_SUCCESS){
        fprintf(stderr, "ERROR: EVP_EncryptInit\n");
        EVP_CIPHER_CTX_free(evp);
        return 0;
    }

    if (EVP_CipherUpdate(evp, NULL, &payloadl, associated_data, associated_data_sz) != SSL_SUCCESS){
        fprintf(stderr, "ERROR: EVP_CipherUpdate\n");
        EVP_CIPHER_CTX_free(evp);
        return 0;
    }

    if (EVP_CipherUpdate(evp, payload, &payloadl, in, inl) != SSL_SUCCESS){
        fprintf(stderr, "ERROR: EVP_CipherUpdate\n");
        EVP_CIPHER_CTX_free(evp);
        return 0;
    }
    *payload_sz = payloadl;

    if (EVP_CipherFinal(evp, payload, &payloadl) != SSL_SUCCESS){
        fprintf(stderr, "ERROR: EVP_CipherFinal\n");
        EVP_CIPHER_CTX_free(evp);
        return 0;
    }

    if (EVP_CIPHER_CTX_ctrl(evp, EVP_CTRL_AEAD_GET_TAG, tag_sz, tag) != SSL_SUCCESS){
        fprintf(stderr, "ERROR: EVP_CIPHER_CTX_ctrl(ENC)\n");
        EVP_CIPHER_CTX_free(evp);
        return 0;            
    }

    EVP_CIPHER_CTX_free(evp);

    return 0;
}

int header_protection(unsigned char header[], int header_sz,
                    unsigned char payload[], int payload_sz,
                    unsigned char key[]

                    ){
    int header_type;//q
    int packet_number_length;
    unsigned char sample[16];
    int sample_sz = 16;

    if ((header[0] & 0x80) != 0){
        header_type = LONG_HEADER;
        // Initial Packet
        if ((header[0]&0x30) == 0){
            packet_number_length = (0x03&header[0]) + 1;
            int sample_begin = 4 - packet_number_length;
            for(int i = 0;i < sample_sz;i++){
                sample[i] = payload[sample_begin+i];
            }
        }
    } else {
        // short header
    }

    int mode = ENC;
    EVP_CIPHER_CTX *evp = NULL;

    if ((evp = EVP_CIPHER_CTX_new()) == NULL){
        fprintf(stderr, "ERROR: header_protection EVP_CIPHER_CTX_NEW\n");
        return 0;
    }

    if (EVP_CipherInit(evp, EVP_aes_128_ecb(), key, NULL, mode) != SSL_SUCCESS){
        fprintf(stderr, "ERROR: header_protection EVP_EncryptionInit\n");
        return 0;
    }

    unsigned char out[16] = {0};
    int out_length;
    if (EVP_CipherUpdate(evp, out, &out_length, sample, sample_sz) != SSL_SUCCESS){
        fprintf(stderr, "ERROR: header_protection EVP_CpiherUpdate\n");
        return 0;
    }

    header[0] ^= out[0] & 0x0f;
    for(int i = 18, mask=1;i <=21 && mask <= 4;i++, mask++){
        header[i] ^= out[mask];
    }

    EVP_CIPHER_CTX_free(evp);

    return 0;
}

void send_initial(unsigned char *packet, int packet_sz){
    int port = 4433;
    int MAXLINE=1500;

	int sockfd;
	char buffer[MAXLINE];
	char *hello = "Hello from client";
	struct sockaddr_in	 servaddr;

	// Creating socket file descriptor
	if ( (sockfd = socket(AF_INET, SOCK_DGRAM, 0)) < 0 ) {
		perror("socket creation failed");
		exit(EXIT_FAILURE);
	}

	memset(&servaddr, 0, sizeof(servaddr));
	
	// Filling server information
	servaddr.sin_family = AF_INET;
	servaddr.sin_port = htons(port);
	servaddr.sin_addr.s_addr = INADDR_ANY;
/*
	in_addr_t dns_ip;
dns_ip = inet_addr("202.12.27.33");
dst_addr.sin_addr.s_addr = dns_ip;
*/
	int n;
    socklen_t len;
	
	sendto(sockfd, (const unsigned char *)packet, packet_sz,
		MSG_CONFIRM, (const struct sockaddr *) &servaddr,
			sizeof(servaddr));
	printf("Hello message sent.\n");
    /*
	sleep(3);
	n = recvfrom(sockfd, (char *)buffer, MAXLINE,
				MSG_WAITALL, (struct sockaddr *) &servaddr,
				&len);
	buffer[n] = '\0';
	printf("Server : %s\n", buffer);

	n = recvfrom(sockfd, (char *)buffer, 17,
				MSG_WAITALL, (struct sockaddr *) &servaddr,
				&len);
	buffer[n] = '\0';
	printf("Server : %s\n", buffer);

	n = recvfrom(sockfd, (char *)buffer, 17,
				MSG_WAITALL, (struct sockaddr *) &servaddr,
				&len);
	buffer[n] = '\0';
	printf("Server : %s\n", buffer);


	close(sockfd);
	return 0;
    */
}

typedef struct {
/*
Initial Packet {
  Header Form (1) = 1,
  Fixed Bit (1) = 1,
  Long Packet Type (2) = 0,
  Reserved Bits (2),
  Packet Number Length (2),
  Version (32),
  Destination Connection ID Length (8),
  Destination Connection ID (0..160),
  Source Connection ID Length (8),
  Source Connection ID (0..160),
  Token Length (i),
  Token (..),
  Length (i),
  Packet Number (8..32),
  Packet Payload (8..),
}
*/


}InitialPacket;

int main(){
    unsigned char in_payload[1162] = {
        0x06,0x00,0x40,0xf1,0x01,0x00,0x00,0xed,0x03,0x03,0xeb,0xf8,0xfa,0x56,0xf1,0x29,0x39,0xb9,0x58,0x4a,0x38,0x96,0x47,0x2e,0xc4,0x0b,0xb8,0x63,0xcf,0xd3,0xe8,0x68,0x04,0xfe,0x3a,0x47,0xf0,0x6a,0x2b,0x69,0x48,0x4c,0x00,0x00,0x04,0x13,0x01,0x13,0x02,0x01,0x00,0x00,0xc0,0x00,0x00,0x00,0x10,0x00,0x0e,0x00,0x00,0x0b,0x65,0x78,0x61,0x6d,0x70,0x6c,0x65,0x2e,0x63,0x6f,0x6d,0xff,0x01,0x00,0x01,0x00,0x00,0x0a,0x00,0x08,0x00,0x06,0x00,0x1d,0x00,0x17,0x00,0x18,0x00,0x10,0x00,0x07,0x00,0x05,0x04,0x61,0x6c,0x70,0x6e,0x00,0x05,0x00,0x05,0x01,0x00,0x00,0x00,0x00,0x00,0x33,0x00,0x26,0x00,0x24,0x00,0x1d,0x00,0x20,0x93,0x70,0xb2,0xc9,0xca,0xa4,0x7f,0xba,0xba,0xf4,0x55,0x9f,0xed,0xba,0x75,0x3d,0xe1,0x71,0xfa,0x71,0xf5,0x0f,0x1c,0xe1,0x5d,0x43,0xe9,0x94,0xec,0x74,0xd7,0x48,0x00,0x2b,0x00,0x03,0x02,0x03,0x04,0x00,0x0d,0x00,0x10,0x00,0x0e,0x04,0x03,0x05,0x03,0x06,0x03,0x02,0x03,0x08,0x04,0x08,0x05,0x08,0x06,0x00,0x2d,0x00,0x02,0x01,0x01,0x00,0x1c,0x00,0x02,0x40,0x01,0x00,0x39,0x00,0x32,0x04,0x08,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff,0x05,0x04,0x80,0x00,0xff,0xff,0x07,0x04,0x80,0x00,0xff,0xff,0x08,0x01,0x10,0x01,0x04,0x80,0x00,0x75,0x30,0x09,0x01,0x10,0x0f,0x08,0x83,0x94,0xc8,0xf0,0x3e,0x51,0x57,0x08,0x06,0x04,0x80,0x00,0xff,0xff
    };
    // set PADDING frame
    for(int i = 245;i < 1162;i++){
        in_payload[i] = 0;
    }
    int in_payload_sz = sizeof(in_payload);

   unsigned char header[] = {
        0xc3,0x00,
        0x00,0x00,
        0x01,0x08,
        0x83,0x94,
        0xc8,0xf0,
        0x3e,0x51,
        0x57,0x08,
        0x00,0x00,
        0x44,0x9e,
        0x00,0x00,
        0x00,0x02
    };
    int header_sz = sizeof(header);

    unsigned char protected_payload[1162];
    int protected_payload_sz = 1162;

    unsigned char key [] = {
        0x1f,0x36,0x96,0x13,0xdd,0x76,0xd5,0x46,0x77,0x30,0xef,0xcb,0xe3,0xb1,0xa2,0x2d,
    };
    int key_sz = sizeof(key);

    int packet_number = 2;
    unsigned char iv[] = {
        0xfa,0x04,0x4b,0x2f,0x42,0xa3,0xfd,0x3b,0x46,0xfb,0x25,0x5c
    };
    int iv_sz = sizeof(iv);

    // The 62 bits of the reconstructed QUIC packet number in network byte order 
    // are left-padded with zeros to the size of the IV.
    // The exclusive OR of the padded packet number and the IV forms the AEAD nonce.
    iv[iv_sz-1] ^= packet_number;

    unsigned char tag[AES_BLOCK_SIZE];
 
    // Associated data is QUIC header.
    // The associated data, A, for the AEAD is the contents of the QUIC header, 
    // starting from the first byte of either the short or long header, 
    // up to and including the unprotected packet number.
    unsigned char *associated_data = new unsigned char[header_sz];
    memcpy(associated_data, header, header_sz);
    int associated_data_sz = header_sz;

    packet_protection(in_payload, in_payload_sz, header, sizeof(header), protected_payload, &protected_payload_sz, key, key_sz, iv, iv_sz, associated_data, associated_data_sz, tag);

    printf("payloadl: %d\n", protected_payload_sz);
    for(int i = 0;i < protected_payload_sz;i++){
        printf("%02x ", protected_payload[i]);
    }
    printf("\n");

    printf("tag_sz: %d\n", AES_BLOCK_SIZE);
    for(int i = 0;i < AES_BLOCK_SIZE;i++){
        printf("%02x ", tag[i]);
    }
    putchar('\n');
    unsigned char tag_answer[] = {
        0xe2,0x21,0xaf,0x44,0x86,0x00,0x18,0xab,0x08,0x56,0x97,0x2e,0x19,0x4c,0xd9,0x34,
    };
    for(int i = 0;i < sizeof(tag_answer);i++){
        if (tag_answer[i] != tag[i]){
            printf("tag is wrong. Something wrong: index:%d answer: %02x, output: %02x\n",i, tag_answer, tag);
        }
    }
    printf("correct\n");

    unsigned char hp_key [] = {
        0x9f,0x50,0x44,0x9e,0x04,0xa0,0xe8,0x10,0x28,0x3a,0x1e,0x99,0x33,0xad,0xed,0xd2
    };
    header_protection(header, header_sz, protected_payload, protected_payload_sz, hp_key);

    // merge header and payload for decoding
    unsigned char *packet = new unsigned char[header_sz + protected_payload_sz + AES_BLOCK_SIZE]; // add header + payload
    int p = 0;
    for(int i = 0;i < header_sz;i++){
        packet[p++] = header[i];
    }
    for(int i = 0;i < protected_payload_sz;i++){
        packet[p++] = protected_payload[i];
    }
    for(int i = 0;i < AES_BLOCK_SIZE;i++){
        packet[p++] = tag[i];
    }


    printf("%d %d\n", header_sz, protected_payload_sz);
    FILE *fp = fopen("packet.bin", "wb");
    fwrite(packet, sizeof(unsigned char), header_sz + protected_payload_sz + AES_BLOCK_SIZE, fp);

    unsigned char header_answer[] = {
        0xc0,0x00,0x00,0x00,0x01,0x08,0x83,0x94,0xc8,0xf0,0x3e,0x51,0x57,0x08,0x00,0x00,0x44,0x9e,0x7b,0x9a,0xec,0x34,
    };
    for(int i = 0;i < sizeof(header_answer);i++){
        printf("%02x", header_answer[i]);
    }
    printf("\n");

    for(int i = 0;i < sizeof(header_answer);i++){
        if (header_answer[i] != header[i]){
            printf("%d th point is wrong. answer: %02x outptu: %02x\n", i, header[i], header_answer[i]);
            return 1;
        }
    }
    printf("header is correct\n");

    unsigned char packet_answer[] = {
        0xc0,0x00,0x00,0x00,0x01,0x08,0x83,0x94,0xc8,0xf0,0x3e,0x51,0x57,0x08,0x00,0x00,0x44,0x9e,0x7b,0x9a,0xec,0x34,0xd1,0xb1,0xc9,0x8d,0xd7,0x68,0x9f,0xb8,0xec,0x11,0xd2,0x42,0xb1,0x23,0xdc,0x9b,0xd8,0xba,0xb9,0x36,0xb4,0x7d,0x92,0xec,0x35,0x6c,0x0b,0xab,0x7d,0xf5,0x97,0x6d,0x27,0xcd,0x44,0x9f,0x63,0x30,0x00,0x99,0xf3,0x99,0x1c,0x26,0x0e,0xc4,0xc6,0x0d,0x17,0xb3,0x1f,0x84,0x29,0x15,0x7b,0xb3,0x5a,0x12,0x82,0xa6,0x43,0xa8,0xd2,0x26,0x2c,0xad,0x67,0x50,0x0c,0xad,0xb8,0xe7,0x37,0x8c,0x8e,0xb7,0x53,0x9e,0xc4,0xd4,0x90,0x5f,0xed,0x1b,0xee,0x1f,0xc8,0xaa,0xfb,0xa1,0x7c,0x75,0x0e,0x2c,0x7a,0xce,0x01,0xe6,0x00,0x5f,0x80,0xfc,0xb7,0xdf,0x62,0x12,0x30,0xc8,0x37,0x11,0xb3,0x93,0x43,0xfa,0x02,0x8c,0xea,0x7f,0x7f,0xb5,0xff,0x89,0xea,0xc2,0x30,0x82,0x49,0xa0,0x22,0x52,0x15,0x5e,0x23,0x47,0xb6,0x3d,0x58,0xc5,0x45,0x7a,0xfd,0x84,0xd0,0x5d,0xff,0xfd,0xb2,0x03,0x92,0x84,0x4a,0xe8,0x12,0x15,0x46,0x82,0xe9,0xcf,0x01,0x2f,0x90,0x21,0xa6,0xf0,0xbe,0x17,0xdd,0xd0,0xc2,0x08,0x4d,0xce,0x25,0xff,0x9b,0x06,0xcd,0xe5,0x35,0xd0,0xf9,0x20,0xa2,0xdb,0x1b,0xf3,0x62,0xc2,0x3e,0x59,0x6d,0x11,0xa4,0xf5,0xa6,0xcf,0x39,0x48,0x83,0x8a,0x3a,0xec,0x4e,0x15,0xda,0xf8,0x50,0x0a,0x6e,0xf6,0x9e,0xc4,0xe3,0xfe,0xb6,0xb1,0xd9,0x8e,0x61,0x0a,0xc8,0xb7,0xec,0x3f,0xaf,0x6a,0xd7,0x60,0xb7,0xba,0xd1,0xdb,0x4b,0xa3,0x48,0x5e,0x8a,0x94,0xdc,0x25,0x0a,0xe3,0xfd,0xb4,0x1e,0xd1,0x5f,0xb6,0xa8,0xe5,0xeb,0xa0,0xfc,0x3d,0xd6,0x0b,0xc8,0xe3,0x0c,0x5c,0x42,0x87,0xe5,0x38,0x05,0xdb,0x05,0x9a,0xe0,0x64,0x8d,0xb2,0xf6,0x42,0x64,0xed,0x5e,0x39,0xbe,0x2e,0x20,0xd8,0x2d,0xf5,0x66,0xda,0x8d,0xd5,0x99,0x8c,0xca,0xbd,0xae,0x05,0x30,0x60,0xae,0x6c,0x7b,0x43,0x78,0xe8,0x46,0xd2,0x9f,0x37,0xed,0x7b,0x4e,0xa9,0xec,0x5d,0x82,0xe7,0x96,0x1b,0x7f,0x25,0xa9,0x32,0x38,0x51,0xf6,0x81,0xd5,0x82,0x36,0x3a,0xa5,0xf8,0x99,0x37,0xf5,0xa6,0x72,0x58,0xbf,0x63,0xad,0x6f,0x1a,0x0b,0x1d,0x96,0xdb,0xd4,0xfa,0xdd,0xfc,0xef,0xc5,0x26,0x6b,0xa6,0x61,0x17,0x22,0x39,0x5c,0x90,0x65,0x56,0xbe,0x52,0xaf,0xe3,0xf5,0x65,0x63,0x6a,0xd1,0xb1,0x7d,0x50,0x8b,0x73,0xd8,0x74,0x3e,0xeb,0x52,0x4b,0xe2,0x2b,0x3d,0xcb,0xc2,0xc7,0x46,0x8d,0x54,0x11,0x9c,0x74,0x68,0x44,0x9a,0x13,0xd8,0xe3,0xb9,0x58,0x11,0xa1,0x98,0xf3,0x49,0x1d,0xe3,0xe7,0xfe,0x94,0x2b,0x33,0x04,0x07,0xab,0xf8,0x2a,0x4e,0xd7,0xc1,0xb3,0x11,0x66,0x3a,0xc6,0x98,0x90,0xf4,0x15,0x70,0x15,0x85,0x3d,0x91,0xe9,0x23,0x03,0x7c,0x22,0x7a,0x33,0xcd,0xd5,0xec,0x28,0x1c,0xa3,0xf7,0x9c,0x44,0x54,0x6b,0x9d,0x90,0xca,0x00,0xf0,0x64,0xc9,0x9e,0x3d,0xd9,0x79,0x11,0xd3,0x9f,0xe9,0xc5,0xd0,0xb2,0x3a,0x22,0x9a,0x23,0x4c,0xb3,0x61,0x86,0xc4,0x81,0x9e,0x8b,0x9c,0x59,0x27,0x72,0x66,0x32,0x29,0x1d,0x6a,0x41,0x82,0x11,0xcc,0x29,0x62,0xe2,0x0f,0xe4,0x7f,0xeb,0x3e,0xdf,0x33,0x0f,0x2c,0x60,0x3a,0x9d,0x48,0xc0,0xfc,0xb5,0x69,0x9d,0xbf,0xe5,0x89,0x64,0x25,0xc5,0xba,0xc4,0xae,0xe8,0x2e,0x57,0xa8,0x5a,0xaf,0x4e,0x25,0x13,0xe4,0xf0,0x57,0x96,0xb0,0x7b,0xa2,0xee,0x47,0xd8,0x05,0x06,0xf8,0xd2,0xc2,0x5e,0x50,0xfd,0x14,0xde,0x71,0xe6,0xc4,0x18,0x55,0x93,0x02,0xf9,0x39,0xb0,0xe1,0xab,0xd5,0x76,0xf2,0x79,0xc4,0xb2,0xe0,0xfe,0xb8,0x5c,0x1f,0x28,0xff,0x18,0xf5,0x88,0x91,0xff,0xef,0x13,0x2e,0xef,0x2f,0xa0,0x93,0x46,0xae,0xe3,0x3c,0x28,0xeb,0x13,0x0f,0xf2,0x8f,0x5b,0x76,0x69,0x53,0x33,0x41,0x13,0x21,0x19,0x96,0xd2,0x00,0x11,0xa1,0x98,0xe3,0xfc,0x43,0x3f,0x9f,0x25,0x41,0x01,0x0a,0xe1,0x7c,0x1b,0xf2,0x02,0x58,0x0f,0x60,0x47,0x47,0x2f,0xb3,0x68,0x57,0xfe,0x84,0x3b,0x19,0xf5,0x98,0x40,0x09,0xdd,0xc3,0x24,0x04,0x4e,0x84,0x7a,0x4f,0x4a,0x0a,0xb3,0x4f,0x71,0x95,0x95,0xde,0x37,0x25,0x2d,0x62,0x35,0x36,0x5e,0x9b,0x84,0x39,0x2b,0x06,0x10,0x85,0x34,0x9d,0x73,0x20,0x3a,0x4a,0x13,0xe9,0x6f,0x54,0x32,0xec,0x0f,0xd4,0xa1,0xee,0x65,0xac,0xcd,0xd5,0xe3,0x90,0x4d,0xf5,0x4c,0x1d,0xa5,0x10,0xb0,0xff,0x20,0xdc,0xc0,0xc7,0x7f,0xcb,0x2c,0x0e,0x0e,0xb6,0x05,0xcb,0x05,0x04,0xdb,0x87,0x63,0x2c,0xf3,0xd8,0xb4,0xda,0xe6,0xe7,0x05,0x76,0x9d,0x1d,0xe3,0x54,0x27,0x01,0x23,0xcb,0x11,0x45,0x0e,0xfc,0x60,0xac,0x47,0x68,0x3d,0x7b,0x8d,0x0f,0x81,0x13,0x65,0x56,0x5f,0xd9,0x8c,0x4c,0x8e,0xb9,0x36,0xbc,0xab,0x8d,0x06,0x9f,0xc3,0x3b,0xd8,0x01,0xb0,0x3a,0xde,0xa2,0xe1,0xfb,0xc5,0xaa,0x46,0x3d,0x08,0xca,0x19,0x89,0x6d,0x2b,0xf5,0x9a,0x07,0x1b,0x85,0x1e,0x6c,0x23,0x90,0x52,0x17,0x2f,0x29,0x6b,0xfb,0x5e,0x72,0x40,0x47,0x90,0xa2,0x18,0x10,0x14,0xf3,0xb9,0x4a,0x4e,0x97,0xd1,0x17,0xb4,0x38,0x13,0x03,0x68,0xcc,0x39,0xdb,0xb2,0xd1,0x98,0x06,0x5a,0xe3,0x98,0x65,0x47,0x92,0x6c,0xd2,0x16,0x2f,0x40,0xa2,0x9f,0x0c,0x3c,0x87,0x45,0xc0,0xf5,0x0f,0xba,0x38,0x52,0xe5,0x66,0xd4,0x45,0x75,0xc2,0x9d,0x39,0xa0,0x3f,0x0c,0xda,0x72,0x19,0x84,0xb6,0xf4,0x40,0x59,0x1f,0x35,0x5e,0x12,0xd4,0x39,0xff,0x15,0x0a,0xab,0x76,0x13,0x49,0x9d,0xbd,0x49,0xad,0xab,0xc8,0x67,0x6e,0xef,0x02,0x3b,0x15,0xb6,0x5b,0xfc,0x5c,0xa0,0x69,0x48,0x10,0x9f,0x23,0xf3,0x50,0xdb,0x82,0x12,0x35,0x35,0xeb,0x8a,0x74,0x33,0xbd,0xab,0xcb,0x90,0x92,0x71,0xa6,0xec,0xbc,0xb5,0x8b,0x93,0x6a,0x88,0xcd,0x4e,0x8f,0x2e,0x6f,0xf5,0x80,0x01,0x75,0xf1,0x13,0x25,0x3d,0x8f,0xa9,0xca,0x88,0x85,0xc2,0xf5,0x52,0xe6,0x57,0xdc,0x60,0x3f,0x25,0x2e,0x1a,0x8e,0x30,0x8f,0x76,0xf0,0xbe,0x79,0xe2,0xfb,0x8f,0x5d,0x5f,0xbb,0xe2,0xe3,0x0e,0xca,0xdd,0x22,0x07,0x23,0xc8,0xc0,0xae,0xa8,0x07,0x8c,0xdf,0xcb,0x38,0x68,0x26,0x3f,0xf8,0xf0,0x94,0x00,0x54,0xda,0x48,0x78,0x18,0x93,0xa7,0xe4,0x9a,0xd5,0xaf,0xf4,0xaf,0x30,0x0c,0xd8,0x04,0xa6,0xb6,0x27,0x9a,0xb3,0xff,0x3a,0xfb,0x64,0x49,0x1c,0x85,0x19,0x4a,0xab,0x76,0x0d,0x58,0xa6,0x06,0x65,0x4f,0x9f,0x44,0x00,0xe8,0xb3,0x85,0x91,0x35,0x6f,0xbf,0x64,0x25,0xac,0xa2,0x6d,0xc8,0x52,0x44,0x25,0x9f,0xf2,0xb1,0x9c,0x41,0xb9,0xf9,0x6f,0x3c,0xa9,0xec,0x1d,0xde,0x43,0x4d,0xa7,0xd2,0xd3,0x92,0xb9,0x05,0xdd,0xf3,0xd1,0xf9,0xaf,0x93,0xd1,0xaf,0x59,0x50,0xbd,0x49,0x3f,0x5a,0xa7,0x31,0xb4,0x05,0x6d,0xf3,0x1b,0xd2,0x67,0xb6,0xb9,0x0a,0x07,0x98,0x31,0xaa,0xf5,0x79,0xbe,0x0a,0x39,0x01,0x31,0x37,0xaa,0xc6,0xd4,0x04,0xf5,0x18,0xcf,0xd4,0x68,0x40,0x64,0x7e,0x78,0xbf,0xe7,0x06,0xca,0x4c,0xf5,0xe9,0xc5,0x45,0x3e,0x9f,0x7c,0xfd,0x2b,0x8b,0x4c,0x8d,0x16,0x9a,0x44,0xe5,0x5c,0x88,0xd4,0xa9,0xa7,0xf9,0x47,0x42,0x41,0xe2,0x21,0xaf,0x44,0x86,0x00,0x18,0xab,0x08,0x56,0x97,0x2e,0x19,0x4c,0xd9,0x34,0xe2,0x21,0xaf,0x44,0x86,0x00,0x18,0xab,0x08,0x56,0x97,0x2e,0x19,0x4c,0xd9,0x34
    };
    for(int i = 0;i < header_sz + protected_payload_sz + AES_BLOCK_SIZE;i++){
        if (packet_answer[i] != packet[i]){
            printf("incorrect at %d\n", i);
            return 1;
        }
    }
    printf("correct\n");

    //send_initial(packet, header_sz + payload_sz + AES_BLOCK_SIZE);
    delete packet;
    return 0;
}